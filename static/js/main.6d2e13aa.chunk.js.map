{"version":3,"sources":["Header.js","StoryBoard.js","QuestionBoard.js","App.js","index.js"],"names":["Header","className","StoryBoard","props","useState","setCurrentValue","toggle","setToggle","handleInput","e","target","value","class","id","userInput","map","uservalue","draggable","onDragStart","handleDragStart","onDragOver","handleDragOver","onDrop","handleDrop","type","name","rows","cols","onChange","onClick","style","display","QuestionBoard","currentQuestionId","setQuestion","setUserInput","progressPercentage","setWidth","toggleState","setToggleState","showContainer","setShowContainer","response","setResponse","currentQuestion","question","currentValue","width","newVar","nextId","newStyle","show","dragStart","data","event","fromBox","JSON","stringify","dataTransfer","setData","dragOver","preventDefault","drop","parse","getData","toBox","swapBoxes","App","setShow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d2e13aa.chunk.js","sourcesContent":["import './App.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <header>\r\n        <div className=\"wrapper\">\r\n            <div className=\"headerContainer\">\r\n                    <div className=\"logo\">\r\n                        <h1>Storri</h1>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import './App.css';\r\nimport { useState, useEffect, useRef, Fragment } from 'react';\r\n// import Main from './Main'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nfunction StoryBoard(props) {\r\n\r\nconst [currentValue, setCurrentValue] = useState(\"\");\r\nconst [toggle, setToggle] = useState(\"\");\r\nconst [response, setResponse] = useState(\"\");\r\n\r\nconst displayCards =  () =>{\r\n    const changeToggle = toggle + \"none\";\r\n    setToggle(changeToggle)\r\n  \r\n}\r\n\r\n// const userWriting = () =>{}\r\n\r\n\r\n\r\n  \r\nconst handleInput = (e) =>{\r\n    setCurrentValue(e.target.value)\r\n}\r\n\r\n  return (\r\n    <div className=\"storySection\">\r\n      <main>\r\n        <section>\r\n          <div className=\"sectionContainer\">\r\n              <div className=\"wrapper\">\r\n              <h2>Writer's Room <button > <i class=\"fas fa-angle-down\"></i> </button></h2>\r\n              <div className=\"blue\" >\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"saveContainer \"id=\"saveContainer\">\r\n                            <div className=\"userAnswer\">{props.userInput.map((uservalue) =>{\r\n                              if(uservalue[0] !== \"\"){\r\n                                return (\r\n                                <div className=\"cards\" draggable=\"true\" onDragStart={props.handleDragStart} onDragOver={props.handleDragOver} onDrop={props.handleDrop} key={uservalue.id}>\r\n                                <h4>{uservalue[1]}</h4>\r\n                                <input type=\"text\" className=\"userAnswerInput\" value={uservalue[2]}></input>\r\n                                <textarea type=\"text\" name=\"echoText\" rows=\"1\" cols=\"20\" onChange={handleInput} className=\"userAnswerTextarea\" value={uservalue[0]}></textarea>  \r\n                                </div>\r\n                                )\r\n                              }  \r\n                            })}\r\n                          </div>                      \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <h2>Blank Cards <button onClick={displayCards} > <i class=\"fas fa-angle-down\"></i></button></h2>\r\n                <div className=\"storyContainer\">\r\n                  <div className=\"wrapper\">\r\n                      <div className=\"blankCards\" style={{display: toggle}}>\r\n                        <div className =\"userAnswer\">\r\n                          {props.userInput.map((uservalue) =>{\r\n                            if(uservalue[0] === \"\"){\r\n                              return(\r\n                                <div className=\"cards\" draggable=\"true\" onDragStart={props.handleDragStart} onDragOver={props.handleDragOver} onDrop={props.handleDrop} key={uservalue.id}>\r\n                                <h4>{uservalue[1]}</h4>\r\n                                <input type=\"text\" className=\"userAnswerInput\" ></input>\r\n                                <textarea type=\"text\" className=\"userAnswerTextarea\" name=\"echoText\" rows=\"1\" cols=\"20\" onChange={handleInput}> </textarea>  \r\n                                </div>\r\n                              )\r\n                            }\r\n                          })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <h2>Beginning <button  > <i class=\"fas fa-angle-down\"></i> </button></h2>\r\n                <div className=\"storyContainer\" >\r\n              <div className=\"wrapper\">\r\n\r\n                  <div className=\"storyBoard\">\r\n                  </div>\r\n              </div>\r\n            </div>\r\n            <h2>Middle <button > <i class=\"fas fa-angle-down\"></i> </button></h2>\r\n            <div className=\"storyContainer\"  >\r\n                <div className=\"wrapper\">\r\n                    <div className=\"storyBoard\">                             \r\n                    </div>\r\n                </div>\r\n            </div>\r\n                <h2>End <button > <i class=\"fas fa-angle-down\"></i> </button></h2>\r\n                  <div className=\"storyContainer\"  >\r\n                      <div className=\"wrapper\">\r\n                          <div className=\"storyBoard\">\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n            \r\n        </section>   \r\n      </main>\r\n    </div>\r\n   \r\n  );\r\n}\r\n\r\nexport default StoryBoard;\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport './App.css';\r\nimport StoryBoard from './StoryBoard';\r\n\r\nfunction QuestionBoard() {\r\n\r\n    const questions = [{\r\n        id:0,\r\n        question:\"Who was there?\",\r\n    \r\n    },\r\n    {\r\n        id:1,\r\n        question:\"Who was there?\",\r\n    \r\n    },\r\n    {\r\n        id:2,\r\n        question:\"Where were you?\",\r\n\r\n    \r\n    },\r\n    {\r\n        id:3,\r\n        question:\"Where were you?\",\r\n\r\n    \r\n    },\r\n    {\r\n        id:4,\r\n        question:\"When did it happen?\",\r\n\r\n    \r\n    },\r\n    {\r\n        id:4,\r\n        question:\"When did it happen?\",\r\n\r\n    \r\n    },\r\n    {\r\n        id:5,\r\n        question:\"What happened?\",\r\n\r\n    \r\n    },\r\n    {\r\n        id:6,\r\n        question:\"What happened?\",\r\n\r\n    \r\n    },\r\n    {\r\n        id:7,\r\n        question:\"Why this story?\",\r\n\r\n    \r\n    }, {\r\n        id:8,\r\n        question:\"Was there any dialogue?\",\r\n\r\n    \r\n    },\r\n    {\r\n        id:9,\r\n        question:\"What did you see?\",\r\n\r\n    \r\n    },\r\n    {\r\n        id:10,\r\n        question:\"What did you see?\",\r\n\r\n    \r\n    },\r\n    {\r\n        id:11,\r\n        question:\"What did you hear?\",\r\n \r\n    },\r\n    {\r\n        id:12,\r\n        question:\"What did you hear?\",\r\n \r\n    },\r\n    {\r\n        id:13,\r\n        question:\"What did you feel?\",\r\n    },\r\n    {\r\n        id:14,\r\n        question:\"What did you feel?\",\r\n    },\r\n    {\r\n        id:15,\r\n        question:\"What did you smell?\",\r\n    },\r\n    {\r\n        id:16,\r\n        question:\"What did you smell?\",\r\n    }\r\n    ]\r\n\r\n    const [currentQuestionId, setQuestion] = useState(0);\r\n    const [userInput, setUserInput] = useState([]);\r\n    const [progressPercentage, setWidth] = useState(0)\r\n    const [toggleState, setToggleState] = useState(\"\");\r\n    const [showContainer, setShowContainer] = useState(\"\")\r\n\r\n    const [response, setResponse] = useState(\"\");\r\n\r\n    const currentQuestion = questions[currentQuestionId];\r\n    \r\n    const [currentValue, setCurrentValue] = useState(\"\")\r\n\r\n    const nextQuestion = () =>{\r\n        const newVar = ([currentValue, currentQuestion.question, response]);\r\n        setUserInput([...userInput, newVar]);\r\n        setCurrentValue('');\r\n        setResponse('')\r\n\r\n        const nextId = currentQuestionId + 1;\r\n        const newStyle = progressPercentage + 5;\r\n        const display = toggleState + \"none\"\r\n        const show = showContainer + \"grid\"\r\n\r\n       \r\n        if (nextId > 16){\r\n            setToggleState(display)\r\n            setShowContainer(show)\r\n        }\r\n        setQuestion(nextId)\r\n        setWidth(newStyle)\r\n    }\r\n\r\n    const handleInput = (e) =>{\r\n         setCurrentValue(e.target.value)\r\n    }\r\n\r\n    const handleText =(e) =>{\r\n        setResponse(e.target.value)\r\n    }\r\n\r\n    const swapBoxes = (fromBox, toBox) => {\r\n        let questions = questions.slice();\r\n        let fromIndex = -1;\r\n        let toIndex = -1;\r\n    \r\n        for (let i = 0; i < questions.length; i++) {\r\n          if (questions[i].id === fromBox.id) {\r\n            fromIndex = i;\r\n          }\r\n          if (questions[i].id === toBox.id) {\r\n            toIndex = i;\r\n          }\r\n        }\r\n    \r\n        if (fromIndex != -1 && toIndex != -1) {\r\n          let { fromId, ...fromRest } = questions[fromIndex];\r\n          let { toId, ...toRest } = questions[toIndex];\r\n          questions[fromIndex] = { id: fromBox.id, ...toRest };\r\n          questions[toIndex] = { id: toBox.id, ...fromRest };\r\n    \r\n          this.setState({ questions: questions });\r\n        }\r\n      };\r\n\r\n      const handleDragStart = data => event => {\r\n        let fromBox = JSON.stringify({ id: data.id });\r\n        event.dataTransfer.setData(\"dragContent\", fromBox);\r\n      };\r\n\r\n      const handleDragOver = data => event => {\r\n        event.preventDefault(); // Necessary. Allows us to drop.\r\n        return false;\r\n      };\r\n\r\n      const handleDrop = data => event => {\r\n        event.preventDefault();\r\n      \r\n        let fromBox = JSON.parse(event.dataTransfer.getData(\"dragContent\"));\r\n        let toBox = { id: data.id };\r\n      \r\n        this.swapBoxes(fromBox, toBox);\r\n        return false;\r\n      };\r\n\r\n\r\n      \r\n\r\n\r\n\r\n    \r\n  return (\r\n    <div>\r\n        <div className=\"wrapper\">\r\n            <div className=\"container\" style={{display: toggleState}}>\r\n                <div className=\"questionBoard active\"  >\r\n                    <div className=\"questionContainer\" >\r\n                        <h3>{currentQuestion.question}</h3>\r\n                        <div className=\"inputContainer\">\r\n                            <input className=\"questionTitle\" type=\"text\"  onChange={handleText} value={response}></input>\r\n                            <p>Give the card a memorable title</p>\r\n                        </div>\r\n                        <div className=\"textareaContainer\">\r\n                            <h3>Notes</h3>\r\n                            <textarea className=\"questionText\" id=\"questionText\" onChange={handleInput} value={currentValue}></textarea>\r\n                            <p>or continue without answering</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"btnsContainer\">\r\n                    <div className=\"barContainer\" >\r\n                        <div className=\"bar\" style={{ width: progressPercentage + \"%\" }} />\r\n                    </div>\r\n                    <div className=\"btnContainer \" onClick={nextQuestion}>\r\n                        <button className=\"nextBtn\">Continue</button>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <section className=\"storyBoardSection\" style={{display: showContainer}}>\r\n        <StoryBoard  userInput={userInput}       \r\n      dragStart={handleDragStart}\r\n      dragOver={handleDragOver}\r\n      drop={handleDrop}/>\r\n        </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionBoard;","import './App.css';\nimport Header from './Header';\nimport { useState, useEffect, useRef } from 'react';\n// import Main from './Main'\nimport QuestionBoard from './QuestionBoard'\n\nfunction App() {\n\n  const [show, setShow] = useState(false)\n  const [display, setDisplay] = useState('')\n\n  const newStory = () =>{\n    // const changeDisplay = display + \"none\";\n    setShow(!show)\n    // if(!show){\n    //   setDisplay(changeDisplay)\n    // }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {\n        show?<QuestionBoard />:null\n      }\n      <button className=\"newBtn\" style={{display: display}} onClick={newStory}> + Add an idea</button>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}