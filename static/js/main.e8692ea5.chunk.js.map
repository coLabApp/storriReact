{"version":3,"sources":["Header.js","useHandleInput.js","QuestionBoard.js","App.js","index.js"],"names":["Header","className","useHandleInput","initialValue","useState","inputData","setInputData","handleChange","e","target","value","reset","QuestionBoard","questions","id","question","textarea","currentQuestionId","setQuestion","useRef","progressPercentage","setWidth","currentQuestion","handleSubmit","type","onChange","style","width","onClick","nextId","newStyle","length","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAkBeA,MAhBf,WACE,OACE,8BACE,iCACE,qBAAKC,UAAU,UAAf,SACI,qBAAKA,UAAU,kBAAf,SACQ,qBAAKA,UAAU,OAAf,SACI,mD,OCGPC,MAVjB,SAAwBC,GAAe,IAAD,EACAC,mBAASD,GADT,mBAC3BE,EAD2B,KAChBC,EADgB,KAGlC,MAAO,CACLC,aAAc,SAACC,GAAQF,EAAaE,EAAEC,OAAOC,QAC7CA,MAAOL,EACPM,MAAO,WAAQL,EAAa,OCyGnBM,MA7Gf,WAEI,IAAMC,EAAY,CAAC,CACfC,GAAG,EACHC,SAAS,wCACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,8CACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,iBACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,sFACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,wEACTC,SAAS,IAEV,CACCF,GAAG,EACHC,SAAS,wEACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,4DACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,kGACTC,SAAS,KA9CQ,EA4DoBZ,mBAAS,GA5D7B,mBA4Dda,EA5Dc,KA4DKC,EA5DL,OA6Dad,mBAAS,IA7DtB,gCA8DQe,iBAAO,IACYf,mBAAS,KA/DpC,gCAgEkBA,mBAAS,IAhE3B,mBAgEdgB,EAhEc,KAgEMC,EAhEN,KAkEfC,EAAkBT,EAAUI,GAlEb,EAmFkBf,EAAe,IAA9CK,EAnFa,EAmFbA,aAGV,OAtFuB,EAmFCgB,aAItB,8BACI,qBAAKtB,UAAU,UAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,uBAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,uBAAOA,UAAU,gBAAgBuB,KAAK,OAAQC,SAAUlB,EAAaG,MAAOY,EAAgBP,WACpG,0BAAUd,UAAU,eAAea,GAAG,eAAeW,SAAUlB,EAA/D,SAA+Ee,EAAgBN,cAE3F,qBAAKf,UAAU,eAAf,SACI,qBAAKA,UAAU,MAAMyB,MAAO,CAAEC,MAAOP,EAAqB,SAGlE,qBAAKnB,UAAU,gBAAgB2B,QA9BtB,WAEjB,IAAMC,EAASZ,EAAoB,EAC7Ba,EAAWV,EAAqB,GAIlCS,GAAUhB,EAAUkB,SACd,sBAANF,EAAS,GAEbX,EAAYW,GACZR,EAASS,IAmBD,SACI,wBAAQ7B,UAAU,UAAlB,8BC7BL+B,MArEf,WAAgB,IAAD,EACmB5B,mBAC9B,CAAC,CACCU,GAAG,EACHC,SAAS,wCACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,8CACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,iBACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,sFACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,wEACTC,SAAS,IAEV,CACCF,GAAG,EACHC,SAAS,wEACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,4DACTC,SAAS,IAGb,CACIF,GAAG,EACHC,SAAS,kGACTC,SAAS,MA9CA,mBA6Db,OA7Da,UA8DX,sBAAKf,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCjENgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e8692ea5.chunk.js","sourcesContent":["import './App.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <header>\r\n        <div className=\"wrapper\">\r\n            <div className=\"headerContainer\">\r\n                    <div className=\"logo\">\r\n                        <h1>Storri</h1>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","// useHandleInput.js\r\nimport { useState, useEffect, useRef } from 'react';\r\nfunction useHandleInput(initialValue) {\r\n    const [inputData, setInputData] = useState(initialValue);\r\n    \r\n    return {\r\n      handleChange: (e) => { setInputData(e.target.value) },\r\n      value: inputData,\r\n      reset: () => { setInputData('') }\r\n    }\r\n  }\r\n  \r\n  export default useHandleInput;","import { useState, useEffect, useRef } from 'react';\r\nimport './App.css';\r\nimport useHandleInput from './useHandleInput'\r\n\r\nfunction QuestionBoard() {\r\n\r\n    const questions = [{\r\n        id:0,\r\n        question:\"Who was there / were you with anyone?\",\r\n        textarea:\"\"\r\n    \r\n    },\r\n    {\r\n        id:1,\r\n        question:\"Where were you / Where did this take place?\",\r\n        textarea:\"\"\r\n    \r\n    },\r\n    {\r\n        id:2,\r\n        question:\"What happened?\",\r\n        textarea:\"\"\r\n    \r\n    },\r\n    {\r\n        id:3,\r\n        question:\"What could you see? What could you hear? What could you feel? What could you smell?\",\r\n        textarea:\"\"\r\n    \r\n    },\r\n    {\r\n        id:4,\r\n        question:\"Think about how you could bring the characters in your story to life?\",\r\n        textarea:\"\"\r\n    \r\n    }, {\r\n        id:5,\r\n        question:\"Do you have photo or video of any aspect or characters in this story?\",\r\n        textarea:\"\"\r\n    \r\n    },\r\n    {\r\n        id:6,\r\n        question:\"What do you this this story could represent or symbolize?\",\r\n        textarea:\"\"\r\n    \r\n    },\r\n    {\r\n        id:7,\r\n        question:\"What is the point of this story? [Think: /*The reason I'm telling you this is because _____*/] \",\r\n        textarea:\"\"\r\n    },\r\n    // {\r\n    //     id:8,\r\n    //     question:\"blank\",\r\n    //     textarea:document.getElementById('questionText').value\r\n    // },\r\n    // {\r\n    //     id:9,\r\n    //     question:\"blank\",\r\n    //     textarea:document.getElementById('questionText').value\r\n    // },\r\n    ]\r\n\r\n    const [currentQuestionId, setQuestion] = useState(0);\r\n    const [userInput, setUserInput] = useState([]);\r\n    const userQuestionTextarea = useRef('');\r\n    const [userQuestionText, setuserQuestionText] = useState('');\r\n    const [progressPercentage, setWidth] = useState(0)\r\n\r\n    const currentQuestion = questions[currentQuestionId];\r\n\r\n\r\n    const nextQuestion = () =>{\r\n        // setUserInput([currentQuestion.question.value, currentQuestion.textarea.value])\r\n        const nextId = currentQuestionId + 1;\r\n        const newStyle = progressPercentage + 15;\r\n\r\n\r\n       \r\n        if (nextId >= questions.length){\r\n            nextId = 7;\r\n        }\r\n        setQuestion(nextId)\r\n        setWidth(newStyle)\r\n    }\r\n\r\n    const { handleChange, handleSubmit } = useHandleInput('');\r\n\r\n    \r\n  return (\r\n    <div>\r\n        <div className=\"wrapper\">\r\n            <div className=\"container\">\r\n                <div className=\"questionBoard active\"  >\r\n                    <div className=\"questionContainer\" >\r\n                        <input className=\"questionTitle\" type=\"text\"  onChange={handleChange}value={currentQuestion.question}></input>\r\n                <textarea className=\"questionText\" id=\"questionText\" onChange={handleChange} >{currentQuestion.textarea}</textarea>\r\n                    </div>\r\n                    <div className=\"barContainer\" >\r\n                        <div className=\"bar\" style={{ width: progressPercentage + \"%\" }} />\r\n                    </div>\r\n\r\n                <div className=\"btnContainer \" onClick={nextQuestion}>\r\n                    <button className=\"nextBtn\">Next</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionBoard;","import './App.css';\nimport Header from './Header';\nimport { useState, useEffect, useRef } from 'react';\n// import Main from './Main'\nimport QuestionBoard from './QuestionBoard'\n\nfunction App() {\n  const [question, setQuestion] = useState(\n    [{\n      id:0,\n      question:\"Who was there / were you with anyone?\",\n      textarea:\"\"\n  \n  },\n  {\n      id:1,\n      question:\"Where were you / Where did this take place?\",\n      textarea:\"\"\n  \n  },\n  {\n      id:2,\n      question:\"What happened?\",\n      textarea:\"\"\n  \n  },\n  {\n      id:3,\n      question:\"What could you see? What could you hear? What could you feel? What could you smell?\",\n      textarea:\"\"\n  \n  },\n  {\n      id:4,\n      question:\"Think about how you could bring the characters in your story to life?\",\n      textarea:\"\"\n  \n  }, {\n      id:5,\n      question:\"Do you have photo or video of any aspect or characters in this story?\",\n      textarea:\"\"\n  \n  },\n  {\n      id:6,\n      question:\"What do you this this story could represent or symbolize?\",\n      textarea:\"\"\n  \n  },\n  {\n      id:7,\n      question:\"What is the point of this story? [Think: /*The reason I'm telling you this is because _____*/] \",\n      textarea:\"\"\n  }\n  // {\n  //     id:8,\n  //     question:\"blank\",\n  //     textarea:document.getElementById('questionText').value\n  // },\n  // {\n  //     id:9,\n  //     question:\"blank\",\n  //     textarea:document.getElementById('questionText').value\n  // },\n  ]\n  )\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <QuestionBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}